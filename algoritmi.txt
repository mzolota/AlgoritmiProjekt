Objašnjenje
-U ovoj datoteci možemo vidjeti obajšnjenje pretraga i rada funkcija te potrebno vrijeme za njihovo izvršavanje.
-Koristili smo Chrono library za mjerenje (u sekundama ) koliko je potrebno vremena da se izvrši zadati zadatak
pozivom funkcije.
-Svaka funkcija će biti opisana (njena svrha , razlog postojanja funkcije itd).
-Ispod navedene funkcije isto tako će biti upisani i rezultati koje funkcija vraća te vrijeme potrebno da se program
compil-a od poziva navedene funkcije.
-U vektor su uneseni svi podaci iz csv-a , vektor tipa podaci. Međutim ovisno o funkcijama testovi će se raditi na odabranim
podacima iz vektora.

-void izracuniaj(vector <podaci> baza) {
.jednostavna funkcija koja nam pozivom ispisuje kada se dogodio zadnji napad , koliko je trajao , adresu i vrijednost.
.napravili smo dodatni vektor tipa podaci s nazivom tempo.
.s jednostavnom petljom smo prošli kroz vektor<baza> gdje su pohranjeni naši podaci.
.u vektor tempo smo pohranili prvu vrijednost iz csv-a i s uvjetom provjeravali godinu zadnjeg napada ( if zadnji napad > noviji od iduceg
pohrani u tempo )
.ralzog izrade ove funkcije je bio prikaz potrebnog vremena za pronalaženje zadnjeg napada najjednostavnijom pretragom pomoću petlje
bez korištenja već ugrađenih funkcija i vremena potrebnog za pronalazak određenog podatka
.VRIJEME POTREBNO ZA PRETRAGU ZADNJEG NAPADA JE : 1.14346s.
}

-void izracunajSTL (vector <podaci> baza) {
.jednostavana ugrađena STL funkcija koju smo koristili za pronalazak godine zanjeg napada
.unosom imena vektora i korištenjem 2 var tipa podaci smo uspoređivali vrijednosti
.funkcija vraća rezultat najveću vrijednost
.VRIJEME POTREBNO ZA PRETRAGU ZADNJEG NAPADA JE : 1.14273s. (malo brže pretražuje od prethodne funkcije).
}

-void UMpretrazivanje(vector <podaci> baza) {
.u ovoj funkciji testirali smo rad s Unordered map-om.
.koristili smo petlju kako bi pohranili i pronašli željeni rezultat u/iz unordered mape.
.broj i-a pokazuje gdje se nalazi vrijednost koju tražimo , počevši od 0 (iz nekog razloga u mapu je povukao i prvi red (adresa,godina itd).
.funkcija je testirana adresom koja se nalazi na broju 10--> u pravilu 8 
.VRIJEME POTREBNO ZA PRONALAZAK PODATKA JE 3.24712s
}

-void UMpretrazivanjaGodine(vector <podaci> baza,int broj) {
.ova funkcija preko parametara bazu podataka i jedan broj ( godinu)
.pomoću petlje prolazimo kroz bazu podataka i s if naredbom uspoređujemo broj iz parametra s brojevima iz baze podataka
.u ovom slučaju koristili smo multimap iz razloga zato što smo godinu koristili kao ključ a adresu kao vrijednost i potrebna 
nam je mapa koja može imati ključeve istih vrijednosti.U multimap smo pohranili godine i adrese.
. funkcija pronadiAdresu prima jedan string i bazu podataka. Ona služi čisto za provjeru prethodne funkcije i dokazuje
da su pohranjene pravilne vrijednosti.Ispisuje godinu , adresu i label.
.VRIJEME POTREBNO ZA PRONALAZAK PODATKA JE 2.3851s
.VRIJEME POTREBNO ZA PRONALAZAK PODATAKA , UKLJUCUJUCI FUNKCIJU POKAZI ADRESU KOJA DOKAZUJE DOBIVENE PODATKE JE 4.45666s
}

-struct sortiranjePoGodini , struct sortiranjePoVrijednosti {
.2 jednostavne strukture za sortiranje vektora tipa podaci
.podaci koji su sortirani su godina i income
.VRIJEME POTREBNO ZA SORTIRANJE PO VRIJEDNOSTI 9.54049s
.VRIJEME POTREBNO ZA SORTIRANJE PO GODINI 12.6951s }

void IzbrisiPoGodini(vector <podaci> &baza , int broj) {
.izbrise sve objekte koje imaju <= godinu od unesenog parametra 
.druga funkcija je brisanje po labelu nista posebno }